Running the code
================

The code to extract timeseries from a given CNeuroMod dataset can be run with
a simple command line that specifies the dataset and the parcellation to use.

For example,
::
   python -m timeseries.run dataset=shinobi parcellation=mist444

Under the hood, the code relies on a combination of .yaml config files.
We use `Hydra <https://hydra.cc/>`_ to flexibly combine datasets, parcellation
atlases and denoising strategies.

Users can call the existing config files from the command line, or customize
their own as explained below. The parameters to specify are described here.


1. Dataset
----------

Dataset config files are saved under
``timeseries/config/dataset/<dset_name>.yaml``

When launching the script, you must specify the name of an input dataset.
The name must correspond to one of the ``<dset_name>.yaml`` files.
::
    python -m timeseries.run dataset=movie10 parcellation=mist444


The script will look for the input data under
``<data_dir>/<dset_name>.fmriprep``

By default, ``<data_dir>`` corresponds to ``./data``.
This default can be overriden at the command line to match another dataset location,
like this.
::
    python -m timeseries.run dataset=movie10 data_dir=/home/user/project/my_data_dir parcellation=mist444

Alternatively, the ``data_dir`` and ``dset_name`` variables can be modified
directly in a dataset ``timeseries/config/dataset/<dset_name>.yaml`` file to reflect the data location.



2. Output Settings
------------------

The **default output directory** (``./outputs``) is specified as ``output_dir`` in
``timeseries/config/base.yaml``.

If needed, this default can be overridden at the command line when launching the code.
::
    python -m timeseries.run dataset=friends parcellation=mist444 output_dir=/home/user/project/results/my_analysis

It can also be modified manually for all analyses directly in ``timeseries/config/base.yaml``


A subject's timeseries will be exported as
::
  <output_dir>/<dset_name>/<parcel_name>/timeseries/<subject>_<dset_name>_<template>_<parcel_name>_<denoising_strategy>_<voxel,parcel>wise_BOLDtimeseries.h5

For example,
::
  ./outputs/friends/MIST_444/timeseries/sub-01_friends_MNI152NLin2009cAsym_MIST_444_simple+gsr_parcelwise_BOLDtimeseries.h5

Subject-specific functional masks and ROI/parcellation masks generated by the script are saved as
::
  <output_dir>/<dset_name>/<parcel_name>/subject_masks/<subject>_<dset_name>_<template>_<func, func+GM>_mask.nii.gz
  <output_dir>/<dset_name>/<parcel_name>/subject_masks/<subject>_<dset_name>_<template>_<parcel_name>_<ROImask, parcellation>.nii.gz


The **type of compression** (if any) applied to the timeseries arrays exported in
.HDF5 files is specified in ``timeseries/config/base.yaml``.
Options for the field ``compression`` are ``null``, ``gzip`` and ``lzf``. If ``compression = gzip``,
the `compression level can be set <https://docs.h5py.org/en/stable/high/dataset.html>`_ with ``compression_opts = [0, 10[``.

The default is ``gzip`` with a compression level of ``4``. To export uncompressed timeseries,
you can override the compression parameters like this.
::
  python -m timeseries.run dataset=movie10 parcellation=mist444 compression=null


3. Subject List
---------------

By default, the script will process all subjects whose data are found under
``<data_dir>/<dset_name>.fmriprep``

To limit the analysis to a subset of subjects, override the ``subject_list: null``
parameter in ``timeseries/config/base.yaml`` when
launching the script.
::
   python -m timeseries.run dataset=friends subject_list=[01,02,03] parcellation=mist444

4. Denoising strategy
---------------------
The script uses ``nilearn.interfaces.fmriprep.load_confounds`` to retrieve
noise confounds from fmri.prep output to denoise the BOLD data.

Choices of denoising strategies are saved under
``timeseries/config/denoise/<denoise_strategy>.yaml``

Each denoise .yaml file contains parameters designed to pass to
`nilearn's load_confounds_strategy <https://nilearn.github.io/dev/modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.html>`_.

By default, the ``simple+gsr`` strategy is called from the base config file
``timeseries/config/base.yaml``. You can override this choice
at the command line.
::
  python -m timeseries.run dataset=friends parcellation=mist444 denoise=scrubbing.5+gsr


You can also create a custom strategy by generating your own
``<my_denoise_strategy>.yaml`` config file and save it in
``timeseries/config/denoise``

In a .yaml file, define your custom strategy in the following format:
::
  name: <name_of_the_strategy>
    function: <load_confounds_strategy>
    parameters:
      <function_parameters>: <options>
      ....


5. Smoothing
-------------------------------

The default smoothing kernel size is set to 5.0 in the base config file.
You can override this choice at the command line.
::
    python -m timeseries.run dataset=friends parcellation=mist444 smoothing_fwhm=3.0



6. Parcellation
---------------

Config files that specify the timeseries parcellation parameters are saved under
``timeseries/config/parcellation/<parcelation_name>.yaml``

The parcellation must be specified when launching the script.
::
    python -m timeseries.run dataset=mario3 parcellation=parcelation_name

Custom parcellations can be added by creating <parcelation_name>.yaml files under
``timeseries/config/parcellation`` and specifying the path to the parcellation
atlas or ROI mask needed to mask the signal (see below).

The following parameters need to be specified in the parcellation .yaml file:

* ``space``. This field specifies whether to process fMRI data in native (T1w) or in standard (MNI) space. Space must match the specified grey matter and parcellation atlas/roi mask. Options = [``T1w``, ``MNI152NLin2009cAsym``].
* ``gm_path``. Full or relative path to a grey matter mask (.nii.gz) to mask the BOLD signal during denoising (before applying the parcellation or ROI mask). To use subject-specific masks, replace the subject number with ``sub-*`` in the file path. Set to ``null`` to specify no mask.
* ``use_template_gm``. Boolean. Set to ``True`` if a standard grey matter mask is used for all subjects. Set to ``False`` if an individual mask is loaded for each subject (replace the subject number with ``sub-*`` in ``gm_path``).
* ``parcellation``. Full or relative path to a parcellation (.nii.gz) that specifies the ROI(s) from which to extract the timeseries. To use subject-specific parcellations, replace the subject number with ``sub-*`` in the file path.
* ``use_template_parcel``. Boolean. Set to ``True`` if ``parcellation`` is a standard atlas (e.g., MIST, Schaefer 7 networks, DiFuMo) or an ROI mask used for all subjects. Set to ``False`` if an individual parcellation or ROI mask is used for each subject (replace the subject number with ``sub-*`` in ``parcellation``).
* ``parcel_name``. The name given to the parcellation, which will be used to label the output.
* ``parcel_type``. Choices = [``dseg``, ``probseg``, ``mask``]. Whether the specified ``parcellation`` is discrete, probabilistic or an ROI mask. Select ``dseg`` or ``probseg`` (depending on the atlas) to extract average timeseries from each parcel in the parcellation atlas. Select ``mask`` to extract timeseries from each voxel within an ROI mask (``parcellation`` must point to a binary mask).

*# TODO: list provided parcellations*

*TODO (optional): add your own custom parcellation: see masks.py (WIP), parcellations.rst (WIP)*

Running the code
================

The code to extract timeseries from a given CNeuroMod dataset can be run with
a simple command line that specifies the dataset and the extraction parameters.

For example,
::
    python run.py dataset=shinobi parcellation=mist444

Under the hood, the code relies on a combination of .yaml config files.
We use `Hydra <https://hydra.cc/>`_ to flexibly combine datasets, parcellation
atlases and denoising strategies.

Users can call the existing config files from the command line, or create their
own as needed. Depending on the analysis specified, supporting documents
(e.g., grey matter masks, parcellation atlases) may need to be added, as
detailed below.

The parameters to specify are described below.


1. Dataset
----------

Dataset config files are saved under
``cneuromod_extract_tseries/timeseries/config/dataset/<dset_name>.yaml``

When launching the script, you must specify the name of an input dataset.
The name must correspond to one of the ``<dset_name>.yaml`` files.
::
    python run.py dataset=movie10 parcellation=mist444

The script will look for the input data under
``<data_dir>/<dset_name>.fmriprep``

By default, ``<data_dir>`` corresponds to ``cneuromod_extract_tseries/data``.
This default can be overriden at the command line to match another dataset location,
like this.

::
    python run.py dataset=movie10 data_dir=/home/user/project/my_data_dir parcellation=mist444

Alternatively, the ``data_dir`` and ``dset_name`` variables can be modified
directly in a dataset ``config/dataset/<dset_name>.yaml`` file to reflect the data location.



2. Output Settings
------------------

The **default output directory** (``../output``) is specified as ``output_dir`` in
``cneuromod_extract_tseries/timeseries/config/base.yaml``.

If needed, this default can simply be overriden at the command line when launching the code.
::
    python run.py dataset=friends parcellation=mist444 output_dir=/home/user/project/results/my_analysis

It can also be modified manually for all analyses directly in ``timeseries/config/base.yaml``


A subject's timeseries will be exported as
::
  <output_dir>/<dset_name>/timeseries/<subject>_<dset_name>_<template>_BOLDtimeseries_<parcel_name>_<denoising_strategy>.h5

For example,
::
  cneuromod_extract_tseries/output/friends/timeseries/sub-01_friends_MNI152NLin2009cAsym_BOLDtimeseries_atlas-MIST_desc-444_dseg_simple+gsr.h5

Subject-specific grey matter and parcellation masks generated by the script are saved as
::
  <output_dir>/<dset_name>/subject_masks/<subject>_<dset_name>_<template>_res-dataset_label-GM_desc_mask.nii.gz
  <output_dir>/<dset_name>/subject_masks/<subject>_<template>_<parcel_name>.nii.gz


The **type of compression** (if any) applied to the timeseries arrays exported in
.HDF5 files is specified in ``cneuromod_extract_tseries/timeseries/config/base.yaml``.
Options for the field ``compression`` are ``null``, ``gzip`` and ``lzf``. If ``compression = gzip``,
the `compression level can be set <https://docs.h5py.org/en/stable/high/dataset.html>`_ with ``compression_opts = [0, 10[``.

The default is ``gzip`` with a compression level of ``4``. To export uncompressed timeseries,
you can override the compression parameters like this.
::
  python run.py dataset=movie10 parcellation=mist444 compression=null


3. Subject List
---------------

By default, the script will process all subjects whose data are found under
``<data_dir>/<dset_name>.fmriprep``

To limit the analysis to a subset of subjects, override the ``subject_list: null``
parameter in ``cneuromod_extract_tseries/timeseries/config/base.yaml`` when
launching the script.

::
  python run.py dataset=friends subject_list=[01,02,03] parcellation=mist444


4. Denoising strategy
---------------------
The script uses ``nilearn.interfaces.fmriprep.load_confounds`` to retrieve
noise confounds from fmri.prep output to denoise the BOLD data.

Choices of denoising strategies are saved under
``cneuromod_extract_tseries/timeseries/config/denoise/<denoise_strategy>.yaml``

Each denoise .yaml file contains parameters designed to pass to
`nilearn's load_confounds_strategy <https://nilearn.github.io/dev/modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.html>`_.

By default, the `simple+gsr` strategy is called from the base config file
``cneuromod_extract_tseries/timeseries/config/base.yaml``. You can override this choice
at the command line.
::
  python run.py dataset=friends parcellation=mist444 denoise=scrubbing.5+gsr


You can also create a custom strategy by generating your own
``<my_denoise_strategy>.yaml`` config file and save it in
``cneuromod_extract_tseries/timeseries/config/denoise``

In a .yaml file, define your custom strategy in the following format:
::
  name: <name_of_the_strategy>
    function: <load_confounds_strategy>
    parameters:
      <function_parameters>: <options>
      ....


5. Standarization and smoothing
-------------------------------

Options for data standardization include ``zscore`` and ``psc``.
By default, the ``zscore`` standardization is called from the base config file
``cneuromod_extract_tseries/timeseries/config/base.yaml``. You can override this choice
at the command line.
::
    python run.py dataset=friends parcellation=mist444 standardize=psc

The default smoothing kernel size is set to 5.0 in the base config file.
You can specify a different value.
::
    python run.py dataset=friends parcellation=mist444 smoothing_fwhm=3.0






6. Parcellation
---------------

Config files that specify the timeseries parcellation parameters are saved under
``cneuromod_extract_tseries/timeseries/config/parcellation/<parcelation_name>.yaml``

The parcellation must be specified when launching the script.
::
    python run.py dataset=mario3 parcellation=parcelation_name

Custom parcellations can be added by creating <parcelation_name>.yaml files in
``cneuromod_extract_tseries/timeseries/config/parcellation`` and saving the atlas
needed to mask the signal (see below).


To use a *standard template atlas* (e.g., MIST, Schaefer 7 networks, DiFuMo),
the following parameters need to be specified in the parcellation .yaml file:

1. ``template``. This field specifies whether to process fMRI data in native (T1w)
or in normalized (MNI) space. Specify ``template = MNI152NLin2009cAsym`` when
using a standard template.
2. ``template_gm_path``. The path to a normalized grey matter mask. Grey matter
masks from the MNI152NLin2009cAsym template, which match the normalized
CNeuroMod data, are saved under
``cneuromod_extract_tseries/atlases/tpl-MNI152NLin2009cAsym``.
Recommended = ``tpl-MNI152NLin2009cAsym_res-02_label-GM_probseg.nii.gz``
3. ``n_iter``. The number of iterations to perform a binary closing to merge the
template grey matter mask (specified with ``template_gm_path``) with a grey matter
mask derived from the subject's functional runs (recommended ``n_iter = 2``).
4. ``parcel_name``. The name given to the parcellation. For each subject, a
subject-specific parcellation will be generated and saved as
<output_dir>/<dset_name>/subject_masks/<subject>_<template>_<parcel_name>.nii.gz.
5. ``parcel_type``. Whether the specified template parcellation is discrete or
probabilistic. Choices = [``dseg``, ``probseg``]
6. ``template_parcellation``. The full path to a standard atlas / parcellation
that specifies the ROI(s) from which to extract the timeseries.
Template parcellations should be saved under
 ``cneuromod_extract_tseries/atlases/tpl-<space>/tpl-<space>_<parcel_descript>.nii.gz``

For example,
``cneuromod_extract_tseries/atlases/tpl-MNI152NLin2009bAsym/tpl-MNI152NLin2009bAsym_res-03_atlas-BASC_desc-444_dseg.nii.gz``


#TODO: look into templateflow...? save and pull options from repo?
